#include "0-defines.aqi"

if(equaln(vRoomInited, 0)) {
    unanimate.all()
    assignn(vRoomInited, 1)

    load.view(viewRoger)

    animate.obj(objEgo)

    set.view(objEgo, viewRoger)

    draw(objEgo)

    if(equaln(vEgoX, 0)) {
        if(equaln(vEgoY, 0)){
            assignn(vEgoX, 100)
            assignn(vEgoY, 100)
        }
    }

    // add wider range to reduce instances of encounter
    random(1, 100, vDiceRoll) 

    reset(fGotcha)
    if(lessn(vDiceRoll, vEnemyChance)) {
        load.view(viewWitch)
        set.view(objMonster, viewWitch)
        draw(objMonster)
        position(objMonster, 80, 80)        
        follow.ego(objMonster, 2, fGotcha)    
    }

    position.v(objEgo, vEgoX, vEgoY)
    assignn(vEgoEdgeTouched, edgeNone)
    set.horizon(40)
}

if(isset(fGotcha)) {
    reset(fGotcha)
    if(!isset(fDead)) { 
        erase(objEgo)
        load.view(viewWitchKill)
        set.view(objMonster, viewWitchKill)
        normal.motion(objMonster)
        assignn(vDeathReason, valXsWitchSnag)
        stop.cycling(objMonster)
        set.cel(objMonster, 0)
        stop.motion(objMonster)
        end.of.loop(objMonster, fDead)    
    }
}

if(!equaln(vEgoEdgeTouched, edgeNone)) {
    if(equaln(vEgoEdgeTouched, edgeTop)) {
        assignn(vEgoY, 160)
        assignn(vEgoEdgeTouched, edgeNone)
        assignn(vRoomInited, valFalse)
        assignn(vCurrentRoom, picDavTreeF1)     
    }

    if(equaln(vEgoEdgeTouched, edgeLeft)) {
        get.posn(objEgo, vEgoX, vEgoY)
        assignn(vEgoY, 50)
        assignn(vEgoEdgeTouched, edgeNone)
        assignn(vRoomInited, valFalse)
        assignn(vCurrentRoom, picDavLakeE2)  
    }

    if(equaln(vEgoEdgeTouched, edgeRight)) {
        get.posn(objEgo, vEgoX, vEgoY)
        assignn(vEgoX, 3)
        assignn(vEgoEdgeTouched, edgeNone)
        assignn(vRoomInited, valFalse)
        assignn(vCurrentRoom, picDavCastleLeftA2)     
    }

    if(equaln(vEgoEdgeTouched, edgeBottom)) {
        get.posn(objEgo, vEgoX, vEgoY)
        assignn(vEgoY, 60)
        assignn(vEgoEdgeTouched, edgeNone)
        assignn(vRoomInited, valFalse)
        assignn(vCurrentRoom, picDavOgreF3)     
    }
}

if(equaln(vEgoDirection, directionStopped)) {
    stop.cycling(objEgo)
}
if(!equaln(vEgoDirection, directionStopped)) {
    start.cycling(objEgo)
}


return()
#message 1 "R11"
